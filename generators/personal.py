import faker
import random
from guidancestuff import loaded_model
from guidance import system, user, assistant, gen, select
import datetime
#constraints that require a variable input like name should be the same as a generator name that generates expected input

locales = [
    "pl_PL",
    "en_US",
    "de_DE",
    "fr_FR",
    "es_ES",
    "it_IT",
    "ru_RU",
    "ja_JP",
    "ko_KR",
    "zh_CN",
]


#generator needs to account for hallucinated input data

def get_name(**kwargs):
    if "locale" in kwargs:
        locale = kwargs["locale"]
    else:
        locale = "pl_PL"
    
    if "gender" in kwargs:
        gender = kwargs["gender"].lower()
    else:
        gender = random.choice(["male","female"])
    fake = faker.Faker(locale)
    if gender == "male":
        return fake.name_male().split()[0]
    elif gender == "female":
        return fake.name_female().split()[0]
    else:
        return fake.name_nonbinary().split()[0]
    

def get_surname(  **kwargs):
    if "locale" in kwargs:
        if kwargs["locale"] in locales:
            locale = kwargs["locale"]
        else:
            random.choice(locales)
    else:
        locale = "pl_PL"
    
    if "gender" in kwargs:
        gender = kwargs["gender"].lower()
    else:
        gender = random.choice(["male","female"])
    fake = faker.Faker(locale)
    if gender == "male":
        return fake.name_male().split()[1]
    elif gender == "female":
        return fake.name_female().split()[1]
    else:
        return fake.name_nonbinary().split()[1]


def get_pesel( **kwargs):
    fake = faker.Faker(locale="pl_PL")
    birth_date = datetime.datetime.strptime(kwargs["birth_date"], "%Y-%m-%d")
    if "gender" in kwargs:
        if kwargs["gender"] in ["male","female"]:
            gender = kwargs["gender"]
        else:
            gender = "male" #I am fairly sure poland has not achieved nonbinary PESELs yet, so defaulting it to male
    pesel = fake.pesel(date_of_birth=birth_date,sex=gender) #please dont cancel me, its just a mental shortcut
    return pesel


def get_nip( **kwargs):
    fake = faker.Faker(locale="pl_PL")
    return fake.nip()   


def get_email( **kwargs):
    llm = loaded_model
    
    with system():
        llm += f"Your goal is to generate a random email address. The email address should be generated based on the name and surname of a person.\
            The name and surname are generated by separate generators."
    with user():
        if "name" in kwargs and "surname" in kwargs:
            llm += "I have a name {name} and a surname {surname}.".format(name=kwargs["name"], surname=kwargs["surname"])
    with assistant():
        llm += "Thinking about this step by step," + gen("Thoth")
        llm += "Based on the data gathered, I think the best value for the email address is" + gen("email", temperature=0.4, max_tokens=20) + "."
    return llm["email"]
    
generators_dict = { 
    "name": {"description": "Generates a random name", "constraints" : ["gender", "locale"],"function": get_name},
    "surname": {"description": "Generates a random surname", "constraints" : ["gender", "locale"],"function": get_surname},
    "pesel": {"description": "Generates a random PESEL number. Requires gender and birth year", "constraints":["gender", "birth_date"],"function": get_pesel},
    "nip": {"description": "Generates a random tax registration number from Poland", "constraints": [], "function": get_nip},
    "email": {"description": "Generates a random email address. Constraints are used to link it to name and surname columns.",
              "constraints": ["name", "surname"], "function": get_email},
}
generators = generators_dict.keys()